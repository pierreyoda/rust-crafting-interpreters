// print statement
print "one";
print true;
print 2 + 1;

// variable declaration
var a = 1;
var b = 2;
print a + b;

// variable assignment
var a = "before";
a = "after";
print a;

// environment scoping
var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

// logical operation
print "hi" or 2; // "hi"
print nil or "yes"; // "yes"

// while
var counter = 0;
while (counter < 5) {
    counter = counter + 1;
    print counter;
}

for loop
var fa = 0;
var ftemp = 0;
print "fib start";
for (var fb = 1; fa < 10000; fb = ftemp + fb) {
  print fa;
  ftemp = fa;
  fa = fb;
}
print "fib end";

fun add(a, b) {
    return a + b;
}
print add;
print add(1, 2);

print clock;
print clock();

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // 1
counter(); // 2

print "=== RESOLVING & BINDING ===";
var a = "global";
{
  fun showA() {
    print a;
  }

  showA(); // "global"
  var a = "block";
  showA(); // "global"
}

fun f() {
  var a = "a";
  var b = "b";
  fun g() {
    print b; // expect: b
    print a; // expect: a
  }
  g();
}
f();

{
  var i = "before";

  // New variable is in inner scope.
  for (var i = 0; i < 1; i = i + 1) {
    print i; // expect: 0

    // Loop body is in second inner scope.
    var i = -1;
    print i; // expect: -1
  }
}

{
  // New variable shadows outer variable.
  for (var i = 0; i > 0; i = i + 1) {}

  // Goes out of scope after loop.
  var i = "after";
  print i; // expect: after

  // Can reuse an existing variable.
  for (i = 0; i < 1; i = i + 1) {
    print i; // expect: 0
  }
}

print "=== CLASSES ===";

class Doughnut {
  cook() {
    print "Fry until golden brown.";
  }
}
class BostonCream < Doughnut {
  cook() {
    super.cook();
    print "Pipe full of custard and coat with chocolate.";
  }
}
BostonCream().cook();

class Breakfast {
  cook() {
    print "Eggs a-fryin'!";
  }

  serve(who) {
    print "Enjoy your breakfast, " + who + ".";
  }
}
print Breakfast;
var breakfast = Breakfast();
print breakfast;
breakfast.cook();
breakfast.serve("test");

// class Cake {
//   taste() {
//     var adjective = "delicious";
//     print "The " + this.flavor + " cake is " + adjective + "!";
//   }
// }

// var cake = Cake();
// cake.flavor = "German chocolate";
// cake.taste(); // Prints "The German chocolate cake is delicious!".

// class WithInitializer {
//     init(value) {
//         this.value = value;
//     }

//     display() {
//         print this.value;
//     }
// }
// var withInitializer = WithInitializer();
// withInitializer.display();
